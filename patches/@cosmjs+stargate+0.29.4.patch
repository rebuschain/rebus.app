diff --git a/node_modules/@cosmjs/stargate/build/signingstargateclient.d.ts b/node_modules/@cosmjs/stargate/build/signingstargateclient.d.ts
index c4a7fde..04561e0 100644
--- a/node_modules/@cosmjs/stargate/build/signingstargateclient.d.ts
+++ b/node_modules/@cosmjs/stargate/build/signingstargateclient.d.ts
@@ -68,7 +68,7 @@ export declare class SigningStargateClient extends StargateClient {
      * from the chain. This is needed when signing for a multisig account, but it also allows for offline signing
      * (See the SigningStargateClient.offline constructor).
      */
-    sign(signerAddress: string, messages: readonly EncodeObject[], fee: StdFee, memo: string, explicitSignerData?: SignerData): Promise<TxRaw>;
+    sign(signerAddress: string, messages: readonly EncodeObject[], fee: StdFee, memo: string, explicitSignerData?: SignerData, isEvmos?: boolean): Promise<TxRaw>;
     private signAmino;
     private signDirect;
 }
diff --git a/node_modules/@cosmjs/stargate/build/signingstargateclient.js b/node_modules/@cosmjs/stargate/build/signingstargateclient.js
index 7884e36..8e99045 100644
--- a/node_modules/@cosmjs/stargate/build/signingstargateclient.js
+++ b/node_modules/@cosmjs/stargate/build/signingstargateclient.js
@@ -178,7 +178,7 @@ class SigningStargateClient extends stargateclient_1.StargateClient {
      * from the chain. This is needed when signing for a multisig account, but it also allows for offline signing
      * (See the SigningStargateClient.offline constructor).
      */
-    async sign(signerAddress, messages, fee, memo, explicitSignerData) {
+    async sign(signerAddress, messages, fee, memo, explicitSignerData, isEvmos) {
         let signerData;
         if (explicitSignerData) {
             signerData = explicitSignerData;
@@ -193,16 +193,21 @@ class SigningStargateClient extends stargateclient_1.StargateClient {
             };
         }
         return (0, proto_signing_1.isOfflineDirectSigner)(this.signer)
-            ? this.signDirect(signerAddress, messages, fee, memo, signerData)
-            : this.signAmino(signerAddress, messages, fee, memo, signerData);
+            ? this.signDirect(signerAddress, messages, fee, memo, signerData, isEvmos)
+            : this.signAmino(signerAddress, messages, fee, memo, signerData, isEvmos);
     }
-    async signAmino(signerAddress, messages, fee, memo, { accountNumber, sequence, chainId }) {
+    async signAmino(signerAddress, messages, fee, memo, { accountNumber, sequence, chainId }, isEvmos) {
         (0, utils_1.assert)(!(0, proto_signing_1.isOfflineDirectSigner)(this.signer));
         const accountFromSigner = (await this.signer.getAccounts()).find((account) => account.address === signerAddress);
         if (!accountFromSigner) {
             throw new Error("Failed to retrieve account from signer");
         }
         const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));
+
+        if (isEvmos) {
+            pubkey.typeUrl = '/ethermint.crypto.v1.ethsecp256k1.PubKey';
+        }
+
         const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;
         const msgs = messages.map((msg) => this.aminoTypes.toAmino(msg));
         const signDoc = (0, amino_1.makeSignDoc)(msgs, fee, chainId, memo, accountNumber, sequence);
@@ -225,13 +230,17 @@ class SigningStargateClient extends stargateclient_1.StargateClient {
             signatures: [(0, encoding_1.fromBase64)(signature.signature)],
         });
     }
-    async signDirect(signerAddress, messages, fee, memo, { accountNumber, sequence, chainId }) {
+    async signDirect(signerAddress, messages, fee, memo, { accountNumber, sequence, chainId }, isEvmos) {
         (0, utils_1.assert)((0, proto_signing_1.isOfflineDirectSigner)(this.signer));
         const accountFromSigner = (await this.signer.getAccounts()).find((account) => account.address === signerAddress);
         if (!accountFromSigner) {
             throw new Error("Failed to retrieve account from signer");
         }
-        const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));
+        let pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));
+        if (isEvmos) {
+            pubkey.typeUrl = '/ethermint.crypto.v1.ethsecp256k1.PubKey';
+        }
+
         const txBodyEncodeObject = {
             typeUrl: "/cosmos.tx.v1beta1.TxBody",
             value: {
